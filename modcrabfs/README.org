* ModcrabFS
ModcrabFS is a case-insensitive, overlay filesystem powered by [[https://github.com/libfuse/libfuse][FUSE]]. It is designed for use by the Modcrab mod manager.
This crate's code was originally derived from [[https://github.com/wfraser/fuse-mt/tree/master/example][PassthroughFS]], the example filesystem for the excellent [[https://github.com/wfraser/fuse-mt/tree/master][FUSE-MT]] crate.
Both that crate and its example were developed by [[https://github.com/wfraser][William R. Fraser]], and FUSE-MT is dual-licensed under Apache 2.0 and MIT.

** Overview
*** Features
1. A simple but effective overlay filesystem.
   * Any number of directories can be overlayed and merged under a single directory.
   * All new files are sent to the upper-most layer.
   * The overlay can also include the VFS's own mountpoint, allowing access to the normally shadowed content.
     
2. All paths within the VFS are case-insensitive.
   * This is accounted for during directory merging, so files differing only in case will properly overwrite eachother.
   * This is extremely useful for mimicking Windows's NTFS file structure.
     
3. The VFS can easily support more complex file trees by attaching more overlays.
   * These secondary overlays can be placed under any directory in the VFS's file tree.
   * This is similar to normal filesystems having a mountpoint inside another filesystem.

4. File deletion and renaming is persistent, but not destructive to any real files.
    * This is done by manipulating the virtual file tree during VFS creation and those operations.
    * These transformations are stored in a dedicated cache file.

*** Quirks and Limitations
1. A mountpoint cannot be the top-most directory in an overlay.
   * This is due to the underlying implementation of shadowed directory access and the overlay's overwrite directory.
   * This could theoretically be fixed, but not without a fairly significant rewrite of those systems.

2. Extended file attributes are not supported.
   * This was mainly cut for simplicity and due to their questionable usefulness.
   * This could also be fixed, but I won't look into it unless Modcrab needs them.

3. Operating systems other than Linux are not supported.
   * While MacOS could be supported, I lack both the interest and hardware to do so.
   * Windows would not benefit from the case-insensitivity, and I'm sure there are better alternative VFSs designed for it.

** Compilation and Usage
*** Dependencies
To run this library, you'll need to install the ~fuse~ or ~fuse3~ packages for the filesystem itself. To build the library, you'll also need ~pkg-config~ and the FUSE libraries and headers.
These FUSE libraries are usually in a package called ~libfuse-dev~ or ~fuse-devel~. Detailed instructions can be found in the ~fuser~ crate's readme, which you can read [[https://github.com/cberner/fuser?tab=readme-ov-file#dependencies][here]].

*** Using the Filesystem
To actually use the filesystem, you just have to import, construct, and mount it.

#+BEGIN_SRC rust
  use modcrabfs::ModcrabFS; // The filesystem itself.
  use std::path::PathBuf; // We need these to construct the overlay.

  let mountpoint = "example/mnt"; // The path to mount the filesystem to.
  let cache = "example/cache.bin"; // The file to store the cache in. This file will be created if it doesn't exist.

  // An overlay is just a list of paths. The first layer is the bottom, and the last is top or overwrite directory.
  // This specifically needs to be of type Vec<PathBuf>.
  let overlay = vec![
  	PathBuf::from("example/one"),
  	PathBuf::from("example/two"),
  	PathBuf::from("example/overwrite"),
  ];

  // Now we can finally create the filesystem and mount it.
  // This will block the main thread until the filesystem is manually unmounted.
  // If you don't want to block the main thread, you can use 'ModcrabFS::spawn_mount()' instead.
  ModcrabFS::new(mountpoint, cache, overlay)?
  	.mount()?;
#+END_SRC
